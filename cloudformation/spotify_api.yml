Resources:
  ApiGatewayCloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: APIGatewayCloudWatchLogsRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"

  ApiGatewayAccountSettings:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayCloudWatchRole.Arn

  SpotifyApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: spotify-api-gateway

  SpotifyApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      ResourceId: !GetAtt SpotifyApiGateway.RootResourceId  # Attach directly to the root ("/")
      RestApiId: !Ref SpotifyApiGateway
      Integration:
        IntegrationHttpMethod: POST  # The HTTP method for Lambda invocation
        Type: AWS_PROXY  # Lambda Proxy Integration
        Uri: !Sub
            - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${SpotifyAPIRequestLambda.Arn}/invocations
            - { Region: !Ref "AWS::Region" }
      MethodResponses:
        - StatusCode: 200  # Success response
          ResponseModels:
            application/json: 'Empty'  # Empty response model (customizable)

  SpotifyApiGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SpotifyAPIRequestLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub
        - arn:aws:execute-api:${Region}:${AccountId}:${ApiId}/*
        - {
            Region: !Ref "AWS::Region",
            AccountId: !Ref "AWS::AccountId",
            ApiId: !Ref SpotifyApiGateway
          }
  SpotifyApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: dev
      RestApiId: !Ref SpotifyApiGateway
      DeploymentId: !Ref SpotifyApiDeployment
      MethodSettings:
        - HttpMethod: "*"
          ResourcePath: "/*"
          LoggingLevel: INFO
          MetricsEnabled: true

  SpotifyApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: SpotifyApiMethod
    Properties:
      RestApiId: !Ref SpotifyApiGateway
      StageName: dev

  SpotifyAPIRequestLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: spotify-api-request-lambda
      Handler: spotify_api_request.lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !ImportValue S3ForRequestName
        S3Key: spotify_api_request.zip
      Timeout: 15
      Environment:
        Variables:
          SPOTIFY_API_BASE_URL: "https://api.spotify.com/v1"

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: SpotifyAPIRequestLambdaRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SpotifyAPIRequestPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              # Allow access to Parameter Store for Spotify tokens and credentials
              - Effect: Allow
                Action:
                  - "ssm:GetParameter"
                  - "ssm:PutParameter"
                Resource: 
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/spotify/*
              # Allow Lambda to invoke the SpotifyAuthLambda for token refresh
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: !ImportValue AuthLambdaArn
              # Allow logging for debugging and monitoring
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: 
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*

  
        
  
  
  
  